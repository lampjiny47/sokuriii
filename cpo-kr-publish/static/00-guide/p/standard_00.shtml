<!DOCTYPE html>
<html lang="ko">
<head>
	<!--#include file="/00-guide/p/guide_inc/guide_top.shtml"-->
</head>
<body>
<!-- WRAP -->
<div id="wrap">
	<!--#include file="/00-guide/p/guide_inc/guide_head.shtml"-->
	<!-- container -->
	<div id="container">
		<!-- left -->
		<div id="sideMenu">
			<ul class="navigation">
				<li><button id="item1">퍼블리싱 표준을 알자</button>
					<ul class="sub">
						<li><button id="item1_1">목적</button></li>
					</ul>
				</li>
				<li><button id="item2">브라우저</button>
					<ul class="sub">
						<li><button id="item2_1">브라우저의 주요 기능</button></li>
						<li><button id="item2_2">브라우저의 상위레벨 구조</button></li>
						<li><button id="item2_3">랜더링 엔진</button></li>
					</ul>
				</li>
				<li><button id="item3">브라우저별 성능</button>
					<ul class="sub">
						<li><button id="item3_1">자바스크립트의 실행속도</button></li>
						<li><button id="item3_2">CPU 사용률</button></li>
						<li><button id="item3_3">DOM 객체 선택</button></li>
						<li><button id="item3_4">CSS 렌더링 속도</button></li>
						<li><button id="item3_5">페이지 로딩 시간</button></li>
						<li><button id="item3_6">웹 브라우저 캐시 성능</button></li>
						<li><button id="item3_7">전체 성능</button></li>
					</ul>
				</li>
			</ul>
		</div>
		<!-- left -->
		<!-- contents -->
		<div id="contents">
		<!-- S:01:퍼블리싱 표준을 알자 -->
			<h3>퍼블리싱 표준을 알자</h3>
			<div id="uio_item1_1" class="component">
				<h4>목적</h4>
				<div class="">
					<p class="txt01">
						우리가 클라이언트에게 제공하고 있는 모든 서비스는 결국 web browser란 프로그램을 통해서 행해집니다.
					</p>
					<p style="text-align:center;margin:20px 0 40px;"><img src="images/standard_00.png" alt="브라우저 그림" style="width:100%;" /></p>
						
					<p class="txt01">
						web browser의 종류는 많아지고, 기존 브라우저 렌더링 엔진을 기반으로 한 새로운 브라우저들이 디바이스별 자체 제작되고 있습니다.
					</p>
					<ul class="f_clear" style="margin:20px 0 40px;">
						<li style="float:left;width:50%;"><img src="images/standard_02.png" alt="브라우저 그림" style="width:100%;" /></li>
						<li style="float:left;width:50%;"><img src="images/standard_01.jpg" alt="브라우저 그림" style="width:100%;" /></li>
					</ul>
					
					<p class="txt01">
						이 모든 디바이스별 브라우저에 대응할 수 있는 방법은 W3C (World Wide Web Consortium)에서 권고한 표준안을 지키는 것입니다.
					</p>
					<div class="txt03">
						웹 사이트나 웹 페이지가 웹 표준을 준수한다는 것은 일반적으로 <strong>올바른 HTML, CSS, 자바스크립트를 사이트나 페이지가 가지고 있다는 것을 뜻</strong>입니다. 
						<br /><strong>HTML은 접근성과 시맨틱 HTML의 가이드라인을 충족</strong>해야 합니다.
						<br />
						<br />웹 표준을 논할 때 일반적으로 다음의 것들이 중요성이 있는 것은
						<ol class="dot01">
							<li>HTML, XHTML, SVG, XForms와 같은 마크업 언어의 W3C 권고</li>
							<li>스타일시트, 특히 CSS의 W3C 권고</li>
							<li>흔히 자바스크립트나 ECMA스크립트로 불리는 Ecma 인터내셔널 표준</li>
							<li>문서 객체 모델의 W3C 권고</li>
							<li>웹 접근성은 일반적으로 W3C의 Web Accessibility Initiative가 출판한 웹 콘텐츠 접근성 가이드라인에 기반을 두고 있습니다.</li>
						</ol>
					</div>
				</div>
			</div>
			
		
		<!-- E:01:퍼블리싱 표준을 알자 -->
		<!-- S:03:브라우저 엔진 종류 -->
			<h3>브라우저
				<span class="refer_doc"><a href="https://ko.wikipedia.org/wiki/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80_%EC%97%94%EC%A7%84" target="_blank">위키백과 참고</a></span>
			</h3>
			<div id="uio_item2_1" class="component">
				<h4>브라우저의 주요 기능</h4>
				<div class="txt02">
					브라우저의 주요 기능은 사용자가 선택한 웹리소스를 서버에 요청하고, 브라우저 윈도우에 디스플레이하여 표현하는 것입니다.
					<br />일반적으로 리소스는 HTML 문서지만, 여기에는 PDF, 이미지, 혹은 기타 다른 유형이 있을 수도 있습니다. 
					<br />이런 리소스의 위치는 사용자가 사용하는 URI(Uniform Resource Identifier)에 의해서 정해집니다.
					<br />
					<br /><strong>브라우저가 HTML 파일을 해석하고 표시하는 방법은 HTML과 CSS으로  </strong>
					<br />이러한 명세는 웹 표준화 기구인 W3C(World Wide Web Consortium) 에서 정해진다. 
					<br />수년 간 일부 브라우저는 사양의 일부만을 준수하고 자체 익스텐션을 개발했다. 이로인해 웹 개발자들 사이에서 심각한 호환성 문제가 발생했다. 오늘날 대부분의 브라우저는 이러한 명세를 거의 지킨다.
				</div>
					<p style="text-align:center;margin:20px 0 40px;"><img src="images/standard_04.png" alt="브라우저 그림" style="width:100%;" /></p>
			</div>
			
			<div id="uio_item2_2" class="component">
				<h4>브라우저의 상위레벨 구조</h4>
				<div class="txt01">
					<ol class="no01">
						<li><strong>유저 인터페이스 </strong>주소창, 앞/뒤 버튼, 북마크 메뉴 등, 요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분입니다.</li>
						<li><strong>브라우저 엔진 </strong>유저 인터페이스와 렌더링 엔진 사이의 동작을 제어합니다.</li>
						<li><strong>렌더링 엔진 </strong>요청한 콘텐츠를 표시해 줍니다. 예를 들어 HTML을 요청하면 HTML과 CSS를 파싱하여 화면에 그려줍니다.</li>
						<li><strong>네트워킹 </strong>HTTP 요청과 같은 네트워크 통신에 사용됩니다. 여기는 플랫폼 독립적인 인터페이스이고 각 플랫폼 하부에서 실행됩니다.</li>
						<li><strong>UI 백엔드 </strong>콤보 박츠, 창과 같은 기본적인 장치를 그립니다. 플랫폼에서 명시하지 않은 일반적인 인터페이스로, OS 사용자 인터페이스 체계를 사용합니다.</li>
						<li><strong>자바스크립트 인터프리터 </strong>자바스크립트 코드를 파싱하고 실행을 위해 사용합니다.</li>
						<li><strong>데이터 스토리지 </strong>자료를 저장하는 계층으로, 쿠키를 저장하는 것과 같이, 모든 종류의 자원을 하드디스크에 저장할 때 사용합니다.
							<br />HTML5 명세에는 브라우저가 지원해야하는 웹 데이터 베이스가 정의 되어 있습니다.</li>
					</ol>
				</div>
				
					<p style="text-align:center;margin:20px 0 40px;"><img src="images/standard_browser_01.png" alt="브라우저 그림" /></p>
			</div>
			<div id="uio_item2_3" class="component">
				<h4>랜더링 엔진(레이아웃 엔진)</h4>
				<h6>랜더링 엔진의 역할</h6>
				<div class="txt03">
					렌더링 엔진의 역할은 말그대로 렌더링이다. 렌더링은 여기서 요청받은 콘텐츠를 브라우저 화면에 보여주는 역할이다.
					<br />기본적으로 렌더링엔진은 HTML, XML, 그리고 이미지를 표시할 수 있다. 플러그인이나 익스텐션을 활용한다면, 다양한 데이터 타입, 
					<br />예를 들어 PDF 등 도 표시할 수 있다. 그러나, 이번 챕터에서는 일반적인 활용 예제인 CSS로 포맷된 HTML과 이미지를 표시하는 법에 대해서 다룰 것이다.
				</div>
				<h6>렌더링 엔진들</h6>
				<div class="txt03">
					브라우저 마다 서로다른 렌더링 엔진을 사용하고 있다.
					<div class="tbl03">
						<table class="wikitable">
						<thead>
							<tr>
								<th>이름</th>
								<th>설명</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<th><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Gecko" title="게코 (레이아웃 엔진)">게코(Gecko)</a></th>
								<td>모질라 재단에서 만든 레이아웃 엔진으로 <strong>파이어폭스, 모질라 선더버드, 시몽키</strong> 등이 이를 탑재하고 있다.</td>
							</tr>
							<tr>
								<th><a href="https://ko.wikipedia.org/wiki/블링크 (레이아웃 엔진)" title="블링크 (레이아웃 엔진)">블링크(Blink)</a></th>
								<td>웹키트에서 파생된 레이아웃 엔진으로 <strong>크롬, 오페라</strong> 등이 이를 탑재하고 있다.</td>
							</tr>
							<tr>
								<th><a href="https://ko.wikipedia.org/wiki/트라이던트 (레이아웃 엔진)" title="트라이던트 (레이아웃 엔진)">트라이던트(Trident)</a></th>
								<td>마이크로소프트의 레이아웃 엔진으로 <strong>인터넷 익스플로러, 아웃룩 익스프레스, 마이크로소프트 아웃룩, 그리고윈앰프, 리얼플레이어의 미니 브라우저</strong>등이 이를 탑재하고 있다.
							</td></tr>
							<tr>
								<th><a href="https://ko.wikipedia.org/wiki/프레스토 (레이아웃 엔진)" title="프레스토 (레이아웃 엔진)">프레스토(Presto)</a></th>
								<td>
									오페라 소프트웨어의 사유 엔진으로 <strong>오페라</strong>가 탑재하고 있다. 
									<br />오페라 15부터는 블링크로 교체되었다.
								</td>
							</tr>
							<tr>
								<th><a href="https://ko.wikipedia.org/wiki/KHTML" title="KHTML">KHTML</a></th>
								<td>KDE의 <strong>컨커러</strong>가 탑재하고 있다.</td>
							</tr>
							<tr>
								<th><a href="https://ko.wikipedia.org/wiki/웹키트" class="mw-redirect" title="웹키트">웹키트(Webkit)</a></th>
								<td>
									KHTML에서 파생된 레이아웃 엔진으로 <strong>사파리</strong> 등이 탑재하고 있다.
									<br />옴니웹, 시이라, 아로라, 미도리, 유즈블, iCab, 어도비 통합 런타임, 휴대 전화(아이폰 포함), 노키아의 Series 60 브라우저, 구글의 안드로이드 플랫폼에 탑재되어 있다.
								</td>
							</tr>
							<tr>
								<th><a href="https://ko.wikipedia.org/wiki/태즈먼 (레이아웃 엔진)" title="태즈먼 (레이아웃 엔진)">태즈먼(Tasman)</a></th>
								<td>마이크로소프트의 레이아웃 엔진으로 <strong>맥용 인터넷 익스플로러</strong>가 탑재하고 있다.</td>
							</tr>
						</tbody>
						</table>
					</div>
					<div>
						<p style="margin:20px 0 40px;"><img src="images/standard_history.png" alt="브라우저 그림" /></p>
					</div>
				</div>


				<h6">주요 흐름</h6>
				<div class="txt03">
					<p>렌더링 엔진은 통신을 통해 요청한 문서의 내용을 얻는 것부터 시작한다. 보통 문서내용은 8kb 단위로 전송된다. 렌더링 엔진의 기본적인 동작과정은 아래와 같다.</p>
					<ol class="no02">
						<li>DOM 트리 구축을 위한 HTML 파싱</li>
						<li>렌더 트리 구축</li>
						<li>렌더 트리 배치</li>
						<li>렌더 트리 그리기</li>
					</ol>
					<p>렌더링 엔진은 HTML 문서를 파싱하기 시작하며, 콘텐츠 트리 내부에서 태그를 DOM 노드로 변환한다.
						<br />그리고 엔진은 CSS파일과 스타일 요소를 파싱하기 시작한다. 
						<br />스타일 정보와 HTML 표시 규칙은 ‘렌더트리’ 라고 부르는 또다른 트리를 생성한다.</p>

					<p>렌더 트리는 색상 또는 면적과 같은 시각적 속성이 있는 사각형을 포함하고 잇는데, 정해진 순서대로 화면에 표시된다.</p>

					<p>렌더 트리 구축 이후에는, 레이아웃 프로세스로 넘어간다. 이 말은, 각 노드가 화면의 정확한 위치에 표시되는 것을 의미한다. 
						<br />다음은 UI 백엔드에서 렌더 트리의 각 노드를 가로지르며 모양을 만들어 내는 그리기 과정이다.</p>
				</div>

				<h6>주요 흐름 예제</h6>
				<div class="txt03">
					<p>웹킷의 주요 흐름</p>
					<p style="margin:20px 0 40px;"><img src="images/webkitflow.png" alt="webkit-main-flow"></p>
				</div>
				<div class="txt03">
					<p>모질라 게코의 렌더링 엔진 주요 흐름</p>
					<p style="margin:20px 0 40px;"><img src="images/gecko.png" alt="gecko-rendering-engine"></p>
					<p>그림에서 보다시피, 웹킷과 게코가 약간 다른 용어를 쓰고 있지만 기본적인 흐름은 동일하다.</p>
					<p>게코는 시각적으로 처리되는 렌더 트리를 프레임트리 라고 부르고, 각 요소를 프레임이라고 부르는 반면, 웹킷은 렌더 객체로 구성되어 있는 렌더 트리라는 용어를 사용한다. 
					<br />웹킷은 요소를 배치하는데 레이아웃이라는 용어를 사용하지만, 개코는 리플로우라는 용어를 사용한다. 
					<br />attachment는 웹킷이 렌드 트리를 생성하기 위해 DOM노드와 시각정보를 연결하는 과정을 의미한다. 
					<br />반면에 게코는 HTML과 DOM트리 사이에 콘텐츠 싱크라고 부르는 과정을 두는데, 이는 DOM 요소를 생성하는 과정으로 웹킷과 비슷하여 큰 의미 있는 차이점으로 보지는 않는다.</p>
				</div>

			</div>
			
		<!-- E:03:브라우저 엔진 종류 -->
		<!-- S:04:브라우저별 성능 -->
			<h3>브라우저별 성능 참고<span class="refer_doc">sixrevisions.com 통계 참고</span></h3>
			<div id="uio_item3_1" class="component">
				<h4>자바스크립트의 실행속도</h4>
				<p class="txt02">
					자바스크립트 실행 속도는 Ajax(에이젝스)로 구현된 웹 사이트들이나 지메일과 같은 웹 어플리케이션 등이 사용자의 요구에 좀 더 빨리 응답할 수 있게 됨을 의미합니다.
					<br />아래 테스트는 선스파이더 자바스크립트 벤치마크(SunSpider JavaScript Benchmark)를 이용하여 자바스크립트의 실행 속도를 측정한 것입니다. 
					<br />측정 결과 542.3ms로 크롬이 가장 빠른 속도를 보였으며, 인터넷 익스플로러가 6,305.5ms로 크롬과 큰 격차를 보인 것을 확인할 수 있습니다.
				</p>
				<p><img src="images/js-speed.png" alt="" style="width:800px;" /></p>
			</div>
			<div id="uio_item3_2" class="component">
				<h4>CPU 사용률</h4>
				<p class="txt02">
					다음은 각 웹 브라우저들이 실행될 때 어느 정도의 CPU 자원이 요구되는지를 나타낸 지표입니다. 
					<br />이러한 CPU 자원의 점유율 확인에는 선스파이더와 윈도우 리소스 모니터(Windows Resource Monitor)가 사용되었습니다.
				</p>
				<p><img src="images/js-cpu.png" alt="" style="width:800px;" /></p>
			</div>
			<div id="uio_item3_3" class="component">
				<h4>DOM 객체 선택</h4>
				<p class="txt02">
					이 테스트에서는 슬랙스피드(SlickSpeed)를 이용하여 JQuery가 엘리먼트를 얼마나 빨리 선택하는 하는지 측정하였으며, 크롬보다 오페라의 싱크율이 가장 높았습니다.
					<br />웹 브라우저가 웹 페이지에서 엘리먼트를 더 빨리 선택할수록 갱신 정보를 더 빠르게 업데이트 시킬 수 있습니다.
				</p>
				<p><img src="images/js-dom.png" alt="" style="width:800px;" /></p>
			</div>
			<div id="uio_item3_4" class="component">
				<h4>CSS 렌더링 속도</h4>
				<p class="txt02">
					CSS 렌더링 속도가 빠른 웹브라우저들은 페이지 응답 속도가 빠르다는 것을 의미합니다. 
					<br />Nontroppo.org에서 제공하는 CSS 렌더링 벤치마크(CSS Rendering Benchmark)를 이용하여 table을 div로 변환하는데 걸리는 시간을 측정한 결과, 크롬이 91ms로 가장 빠른 속도를 나타내고 있습니다.
				</p>
				<p><img src="images/js-css.png" alt="" style="width:800px;" /></p>
			</div>
			<div id="uio_item3_5" class="component">
				<h4>페이지 로딩 시간</h4>
				<p class="txt02">
					mion Stopwatch를 사용하여 Yahoo.com의 초기 화면을 로딩하는 데에 필요한 시간을 측정한 결과입니다. 
					<br />로딩 테스트는 순간의 네트워크 트래픽과 서버 로딩 시 발생하는 지연 시간의 차이 때문에 결과에 오차가 있을 수도 있습니다.
				</p>
				<p><img src="images/js-loading.png" alt="" style="width:800px;" /></p>
			</div>
			<div id="uio_item3_6" class="component">
				<h4>웹 브라우저 캐시 성능</h4>
				<p class="txt02">
					이미 방문했던 웹 사이트를 재방문했을 때 웹 브라우저가 얼마나 잘 수행하는지를 측정한 결과입니다. 
					<br />웹 브라우저 캐시의 성능 측정은 페이지 로딩 시간 측정 때와 마찬가지로 지연 시간의 차이로 인한 오차가 있을 수 있습니다.
				</p>
				<p><img src="images/js-cache.png" alt="" style="width:800px;" /></p>
			</div>
			<div id="uio_item3_7" class="component">
				<h4>전체 성능</h4>
				<p class="txt02">
					위의 결과들을 기준으로 각 웹 브라우저들의 성능을 평가한 결과는 아래와 같습니다.
				</p>
				<h6>sixrevisions.com 통계 참고</h6>
				<p><img src="images/js-performance.png" alt="" style="width:800px;" /></p>
				<h6>LGCNS 통계 참조</h6>
				<p><img src="images/standard_browser_02.jpg" alt="https://blog.lgcns.com/1073" /></p>
			</div>
			
		<!-- E:04:브라우저 특성 -->
			
		</div>
		<!-- contents -->
	</div>
	<!-- //container -->
	<!--#include file="/00-guide/p/guide_inc/guide_footer.shtml"-->
</div>
<!-- //WRAP -->

</body>
</html>